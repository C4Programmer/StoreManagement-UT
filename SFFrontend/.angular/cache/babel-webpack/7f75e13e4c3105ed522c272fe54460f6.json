{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/authentication.service\";\nimport * as i3 from \"../service/user.service\";\nimport * as i4 from \"../service/notification.service\";\nimport * as i5 from \"@angular/common\";\n\nfunction UserComponent_small_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const title_r1 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(title_r1);\n  }\n}\n\nexport class UserComponent {\n  // private titleSubject = new BehaviorSubject<string>('Users');\n  // public titleAction$ = this.titleSubject.asObservable();\n  // public users: User[];\n  // public user: User;\n  // public refreshing: boolean;\n  // public selectedUser: User;\n  // public fileName: string;\n  // public profileImage: File;\n  // private subscriptions: Subscription[] = [];\n  // public editUser = new User();\n  // private currentUsername: string;\n  // public fileStatus = new FileUploadStatus();\n  constructor(router, authenticationService, userService, notificationService) {\n    this.router = router;\n    this.authenticationService = authenticationService;\n    this.userService = userService;\n    this.notificationService = notificationService;\n  }\n\n  ngOnInit() {// this.user = this.authenticationService.getUserFromLocalCache();\n    // this.getUsers(true);\n  } //   public changeTitle(title: string): void {\n  //     this.titleSubject.next(title);\n  //   }\n  //   public getUsers(showNotification: boolean): void {\n  //     this.refreshing = true;\n  //     this.subscriptions.push(\n  //       this.userService.getUsers().subscribe(\n  //         (response: User[]) => {\n  //           this.userService.addUsersToLocalCache(response);\n  //           this.users = response;\n  //           this.refreshing = false;\n  //           if (showNotification) {\n  //             this.sendNotification(NotificationType.SUCCESS, `${response.length} user(s) loaded successfully.`);\n  //           }\n  //         },\n  //         (errorResponse: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n  //           this.refreshing = false;\n  //         }\n  //       )\n  //     );\n  //   }\n  //   public onSelectUser(selectedUser: User): void {\n  //     this.selectedUser = selectedUser;\n  //     this.clickButton('openUserInfo');\n  //   }\n  //   public onProfileImageChange(fileName: string, profileImage: File): void {\n  //     this.fileName =  fileName;\n  //     this.profileImage = profileImage;\n  //   }\n  //   public saveNewUser(): void {\n  //     this.clickButton('new-user-save');\n  //   }\n  //   public onAddNewUser(userForm: NgForm): void {\n  //     const formData = this.userService.createUserFormData(null, userForm.value, this.profileImage);\n  //     this.subscriptions.push(\n  //       this.userService.addUser(formData).subscribe(\n  //         (response: User) => {\n  //           this.clickButton('new-user-close');\n  //           this.getUsers(false);\n  //           this.fileName = null;\n  //           this.profileImage = null;\n  //           userForm.reset();\n  //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} added successfully`);\n  //         },\n  //         (errorResponse: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n  //           this.profileImage = null;\n  //         }\n  //       )\n  //       );\n  //   }\n  //   public onUpdateUser(): void {\n  //     const formData = this.userService.createUserFormData(this.currentUsername, this.editUser, this.profileImage);\n  //     this.subscriptions.push(\n  //       this.userService.updateUser(formData).subscribe(\n  //         (response: User) => {\n  //           this.clickButton('closeEditUserModalButton');\n  //           this.getUsers(false);\n  //           this.fileName = null;\n  //           this.profileImage = null;\n  //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} updated successfully`);\n  //         },\n  //         (errorResponse: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n  //           this.profileImage = null;\n  //         }\n  //       )\n  //       );\n  //   }\n  //   public onUpdateCurrentUser(user: User): void {\n  //     this.refreshing = true;\n  //     this.currentUsername = this.authenticationService.getUserFromLocalCache().username;\n  //     const formData = this.userService.createUserFormData(this.currentUsername, user, this.profileImage);\n  //     this.subscriptions.push(\n  //       this.userService.updateUser(formData).subscribe(\n  //         (response: User) => {\n  //           this.authenticationService.addUserToLocalCache(response);\n  //           this.getUsers(false);\n  //           this.fileName = null;\n  //           this.profileImage = null;\n  //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} updated successfully`);\n  //         },\n  //         (errorResponse: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n  //           this.refreshing = false;\n  //           this.profileImage = null;\n  //         }\n  //       )\n  //       );\n  //   }\n  //   public onUpdateProfileImage(): void {\n  //     const formData = new FormData();\n  //     formData.append('username', this.user.username);\n  //     formData.append('profileImage', this.profileImage);\n  //     this.subscriptions.push(\n  //       this.userService.updateProfileImage(formData).subscribe(\n  //         (event: HttpEvent<any>) => {\n  //           this.reportUploadProgress(event);\n  //         },\n  //         (errorResponse: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n  //           this.fileStatus.status = 'done';\n  //         }\n  //       )\n  //     );\n  //   }\n  //   private reportUploadProgress(event: HttpEvent<any>): void {\n  //     switch (event.type) {\n  //       case HttpEventType.UploadProgress:\n  //         this.fileStatus.percentage = Math.round(100 * event.loaded / event.total);\n  //         this.fileStatus.status = 'progress';\n  //         break;\n  //       case HttpEventType.Response:\n  //         if (event.status === 200) {\n  //           this.user.profileImageURL = `${event.body.profileImageUrl}?time=${new Date().getTime()}`;\n  //           this.sendNotification(NotificationType.SUCCESS, `${event.body.firstName}\\'s profile image updated successfully`);\n  //           this.fileStatus.status = 'done';\n  //           break;\n  //         } else {\n  //           this.sendNotification(NotificationType.ERROR, `Unable to upload image. Please try again`);\n  //           break;\n  //         }\n  //       default:\n  //         `Finished all processes`;\n  //     }\n  //   }\n  //   public updateProfileImage(): void {\n  //     this.clickButton('profile-image-input');\n  //   }\n  //   public onLogOut(): void {\n  //     this.authenticationService.logout();\n  //     this.router.navigate(['/login']);\n  //     this.sendNotification(NotificationType.SUCCESS, `You've been successfully logged out`);\n  //   }\n  //   public onResetPassword(emailForm: NgForm): void {\n  //     this.refreshing = true;\n  //     const emailAddress = emailForm.value['reset-password-email'];\n  //     this.subscriptions.push(\n  //       this.userService.resetPassword(emailAddress).subscribe(\n  //         (response: CustomHttpResponse) => {\n  //           this.sendNotification(NotificationType.SUCCESS, response.message);\n  //           this.refreshing = false;\n  //         },\n  //         (error: HttpErrorResponse) => {\n  //           this.sendNotification(NotificationType.WARNING, error.error.message);\n  //           this.refreshing = false;\n  //         },\n  //         () => emailForm.reset()\n  //       )\n  //     );\n  //   }\n  //   // public onDeleteUder(username: string): void {\n  //   //   this.subscriptions.push(\n  //   //     this.userService.deleteUser(username).subscribe(\n  //   //       (response: CustomHttpResponse) => {\n  //   //         this.sendNotification(NotificationType.SUCCESS, response.message);\n  //   //         this.getUsers(false);\n  //   //       },\n  //   //       (error: HttpErrorResponse) => {\n  //   //         this.sendNotification(NotificationType.ERROR, error.error.message);\n  //   //       }\n  //   //     )\n  //   //   );\n  //   // }\n  //   public onEditUser(editUser: User): void {\n  //     this.editUser = editUser;\n  //     this.currentUsername = editUser.username;\n  //     this.clickButton('openUserEdit');\n  //   }\n  //   public searchUsers(searchTerm: string): void {\n  //     const results: User[] = [];\n  //     for (const user of this.userService.getUsersFromLocalCache()) {\n  //       if (user.firstName.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\n  //           user.lastName.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\n  //           user.username.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\n  //           user.userID.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {\n  //           results.push(user);\n  //       }\n  //     }\n  //     this.users = results;\n  //     if (results.length === 0 || !searchTerm) {\n  //       this.users = this.userService.getUsersFromLocalCache();\n  //     }\n  //   }\n  //   public get isAdmin(): boolean {\n  //     return this.getUserRole() === Role.ADMIN;\n  //   }\n  //   private getUserRole(): string {\n  //     return this.authenticationService.getUserFromLocalCache().role;\n  //   }\n  //   private sendNotification(notificationType: NotificationType, message: string): void {\n  //     if (message) {\n  //       this.notificationService.notify(notificationType, message);\n  //     } else {\n  //       this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n  //     }\n  //   }\n  //   private clickButton(buttonId: string): void {\n  //     document.getElementById(buttonId).click();\n  //   }\n\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n\nUserComponent.ɵfac = function UserComponent_Factory(t) {\n  return new (t || UserComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.NotificationService));\n};\n\nUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserComponent,\n  selectors: [[\"app-user\"]],\n  decls: 21,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"row\", \"mb-2\", \"mt-2\", \"text-center\"], [1, \"col-md-4\"], [4, \"ngIf\"], [1, \"navbar\", \"navbar-expand-md\", \"breadcrumb\"], [\"id\", \"navbarCollapse\", 1, \"collapse\", \"navbar-collapse\"], [1, \"nav\", \"nav-pills\"], [\"data-toggle\", \"tab\", \"href\", \"#users\", 1, \"nav-item\", \"nav-link\", \"active\", \"ml-1\", 3, \"click\"], [1, \"fa\", \"fa-users\"], [\"data-toggle\", \"tab\", \"href\", \"#reset-password\", 1, \"nav-item\", \"nav-link\", \"ml-3\", 3, \"hidden\", \"click\"], [1, \"fa\", \"fa-cogs\"], [\"data-toggle\", \"tab\", \"href\", \"#profile\", 1, \"nav-item\", \"nav-link\", \"move-right\", \"mr-3\", 3, \"click\"], [1, \"fa\", \"fa-user\"]],\n  template: function UserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵelementStart(4, \"h5\");\n      i0.ɵɵtext(5, \"User Management Portal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, UserComponent_small_6_Template, 2, 1, \"small\", 3);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"div\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"nav\", 4);\n      i0.ɵɵelementStart(10, \"div\", 5);\n      i0.ɵɵelementStart(11, \"div\", 6);\n      i0.ɵɵelementStart(12, \"a\", 7);\n      i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_12_listener() {\n        return ctx.changeTitle(\"Users\");\n      });\n      i0.ɵɵelement(13, \"i\", 8);\n      i0.ɵɵtext(14, \" Users \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"a\", 9);\n      i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_15_listener() {\n        return ctx.changeTitle(\"Settings\");\n      });\n      i0.ɵɵelement(16, \"i\", 10);\n      i0.ɵɵtext(17, \" Settings \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"a\", 11);\n      i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_18_listener() {\n        return ctx.changeTitle(\"Profile\");\n      });\n      i0.ɵɵtext(19);\n      i0.ɵɵelement(20, \"i\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(7, 3, ctx.titleAction$));\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"hidden\", !ctx.isAdmin);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\" Welcome, \", ctx.user == null ? null : ctx.user.firstName, \" \");\n    }\n  },\n  directives: [i5.NgIf],\n  pipes: [i5.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"sources":["C:/Users/Asus/Desktop/Projects/UT/SFinances-SE/SFFrontend/src/app/user/user.component.ts"],"names":["i0","i1","i2","i3","i4","i5","UserComponent_small_6_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","title_r1","ngIf","ɵɵadvance","ɵɵtextInterpolate","UserComponent","constructor","router","authenticationService","userService","notificationService","ngOnInit","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","ɵfac","UserComponent_Factory","t","ɵɵdirectiveInject","Router","AuthenticationService","UserService","NotificationService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","UserComponent_Template","ɵɵelement","ɵɵtemplate","ɵɵpipe","ɵɵlistener","UserComponent_Template_a_click_12_listener","changeTitle","UserComponent_Template_a_click_15_listener","UserComponent_Template_a_click_18_listener","ɵɵproperty","ɵɵpipeBind1","titleAction$","isAdmin","ɵɵtextInterpolate1","user","firstName","directives","NgIf","pipes","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"../service/authentication.service\";\r\nimport * as i3 from \"../service/user.service\";\r\nimport * as i4 from \"../service/notification.service\";\r\nimport * as i5 from \"@angular/common\";\r\nfunction UserComponent_small_6_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"small\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const title_r1 = ctx.ngIf;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate(title_r1);\r\n} }\r\nexport class UserComponent {\r\n    // private titleSubject = new BehaviorSubject<string>('Users');\r\n    // public titleAction$ = this.titleSubject.asObservable();\r\n    // public users: User[];\r\n    // public user: User;\r\n    // public refreshing: boolean;\r\n    // public selectedUser: User;\r\n    // public fileName: string;\r\n    // public profileImage: File;\r\n    // private subscriptions: Subscription[] = [];\r\n    // public editUser = new User();\r\n    // private currentUsername: string;\r\n    // public fileStatus = new FileUploadStatus();\r\n    constructor(router, authenticationService, userService, notificationService) {\r\n        this.router = router;\r\n        this.authenticationService = authenticationService;\r\n        this.userService = userService;\r\n        this.notificationService = notificationService;\r\n    }\r\n    ngOnInit() {\r\n        // this.user = this.authenticationService.getUserFromLocalCache();\r\n        // this.getUsers(true);\r\n    }\r\n    //   public changeTitle(title: string): void {\r\n    //     this.titleSubject.next(title);\r\n    //   }\r\n    //   public getUsers(showNotification: boolean): void {\r\n    //     this.refreshing = true;\r\n    //     this.subscriptions.push(\r\n    //       this.userService.getUsers().subscribe(\r\n    //         (response: User[]) => {\r\n    //           this.userService.addUsersToLocalCache(response);\r\n    //           this.users = response;\r\n    //           this.refreshing = false;\r\n    //           if (showNotification) {\r\n    //             this.sendNotification(NotificationType.SUCCESS, `${response.length} user(s) loaded successfully.`);\r\n    //           }\r\n    //         },\r\n    //         (errorResponse: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\r\n    //           this.refreshing = false;\r\n    //         }\r\n    //       )\r\n    //     );\r\n    //   }\r\n    //   public onSelectUser(selectedUser: User): void {\r\n    //     this.selectedUser = selectedUser;\r\n    //     this.clickButton('openUserInfo');\r\n    //   }\r\n    //   public onProfileImageChange(fileName: string, profileImage: File): void {\r\n    //     this.fileName =  fileName;\r\n    //     this.profileImage = profileImage;\r\n    //   }\r\n    //   public saveNewUser(): void {\r\n    //     this.clickButton('new-user-save');\r\n    //   }\r\n    //   public onAddNewUser(userForm: NgForm): void {\r\n    //     const formData = this.userService.createUserFormData(null, userForm.value, this.profileImage);\r\n    //     this.subscriptions.push(\r\n    //       this.userService.addUser(formData).subscribe(\r\n    //         (response: User) => {\r\n    //           this.clickButton('new-user-close');\r\n    //           this.getUsers(false);\r\n    //           this.fileName = null;\r\n    //           this.profileImage = null;\r\n    //           userForm.reset();\r\n    //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} added successfully`);\r\n    //         },\r\n    //         (errorResponse: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\r\n    //           this.profileImage = null;\r\n    //         }\r\n    //       )\r\n    //       );\r\n    //   }\r\n    //   public onUpdateUser(): void {\r\n    //     const formData = this.userService.createUserFormData(this.currentUsername, this.editUser, this.profileImage);\r\n    //     this.subscriptions.push(\r\n    //       this.userService.updateUser(formData).subscribe(\r\n    //         (response: User) => {\r\n    //           this.clickButton('closeEditUserModalButton');\r\n    //           this.getUsers(false);\r\n    //           this.fileName = null;\r\n    //           this.profileImage = null;\r\n    //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} updated successfully`);\r\n    //         },\r\n    //         (errorResponse: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\r\n    //           this.profileImage = null;\r\n    //         }\r\n    //       )\r\n    //       );\r\n    //   }\r\n    //   public onUpdateCurrentUser(user: User): void {\r\n    //     this.refreshing = true;\r\n    //     this.currentUsername = this.authenticationService.getUserFromLocalCache().username;\r\n    //     const formData = this.userService.createUserFormData(this.currentUsername, user, this.profileImage);\r\n    //     this.subscriptions.push(\r\n    //       this.userService.updateUser(formData).subscribe(\r\n    //         (response: User) => {\r\n    //           this.authenticationService.addUserToLocalCache(response);\r\n    //           this.getUsers(false);\r\n    //           this.fileName = null;\r\n    //           this.profileImage = null;\r\n    //           this.sendNotification(NotificationType.SUCCESS, `${response.firstName} ${response.lastName} updated successfully`);\r\n    //         },\r\n    //         (errorResponse: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\r\n    //           this.refreshing = false;\r\n    //           this.profileImage = null;\r\n    //         }\r\n    //       )\r\n    //       );\r\n    //   }\r\n    //   public onUpdateProfileImage(): void {\r\n    //     const formData = new FormData();\r\n    //     formData.append('username', this.user.username);\r\n    //     formData.append('profileImage', this.profileImage);\r\n    //     this.subscriptions.push(\r\n    //       this.userService.updateProfileImage(formData).subscribe(\r\n    //         (event: HttpEvent<any>) => {\r\n    //           this.reportUploadProgress(event);\r\n    //         },\r\n    //         (errorResponse: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\r\n    //           this.fileStatus.status = 'done';\r\n    //         }\r\n    //       )\r\n    //     );\r\n    //   }\r\n    //   private reportUploadProgress(event: HttpEvent<any>): void {\r\n    //     switch (event.type) {\r\n    //       case HttpEventType.UploadProgress:\r\n    //         this.fileStatus.percentage = Math.round(100 * event.loaded / event.total);\r\n    //         this.fileStatus.status = 'progress';\r\n    //         break;\r\n    //       case HttpEventType.Response:\r\n    //         if (event.status === 200) {\r\n    //           this.user.profileImageURL = `${event.body.profileImageUrl}?time=${new Date().getTime()}`;\r\n    //           this.sendNotification(NotificationType.SUCCESS, `${event.body.firstName}\\'s profile image updated successfully`);\r\n    //           this.fileStatus.status = 'done';\r\n    //           break;\r\n    //         } else {\r\n    //           this.sendNotification(NotificationType.ERROR, `Unable to upload image. Please try again`);\r\n    //           break;\r\n    //         }\r\n    //       default:\r\n    //         `Finished all processes`;\r\n    //     }\r\n    //   }\r\n    //   public updateProfileImage(): void {\r\n    //     this.clickButton('profile-image-input');\r\n    //   }\r\n    //   public onLogOut(): void {\r\n    //     this.authenticationService.logout();\r\n    //     this.router.navigate(['/login']);\r\n    //     this.sendNotification(NotificationType.SUCCESS, `You've been successfully logged out`);\r\n    //   }\r\n    //   public onResetPassword(emailForm: NgForm): void {\r\n    //     this.refreshing = true;\r\n    //     const emailAddress = emailForm.value['reset-password-email'];\r\n    //     this.subscriptions.push(\r\n    //       this.userService.resetPassword(emailAddress).subscribe(\r\n    //         (response: CustomHttpResponse) => {\r\n    //           this.sendNotification(NotificationType.SUCCESS, response.message);\r\n    //           this.refreshing = false;\r\n    //         },\r\n    //         (error: HttpErrorResponse) => {\r\n    //           this.sendNotification(NotificationType.WARNING, error.error.message);\r\n    //           this.refreshing = false;\r\n    //         },\r\n    //         () => emailForm.reset()\r\n    //       )\r\n    //     );\r\n    //   }\r\n    //   // public onDeleteUder(username: string): void {\r\n    //   //   this.subscriptions.push(\r\n    //   //     this.userService.deleteUser(username).subscribe(\r\n    //   //       (response: CustomHttpResponse) => {\r\n    //   //         this.sendNotification(NotificationType.SUCCESS, response.message);\r\n    //   //         this.getUsers(false);\r\n    //   //       },\r\n    //   //       (error: HttpErrorResponse) => {\r\n    //   //         this.sendNotification(NotificationType.ERROR, error.error.message);\r\n    //   //       }\r\n    //   //     )\r\n    //   //   );\r\n    //   // }\r\n    //   public onEditUser(editUser: User): void {\r\n    //     this.editUser = editUser;\r\n    //     this.currentUsername = editUser.username;\r\n    //     this.clickButton('openUserEdit');\r\n    //   }\r\n    //   public searchUsers(searchTerm: string): void {\r\n    //     const results: User[] = [];\r\n    //     for (const user of this.userService.getUsersFromLocalCache()) {\r\n    //       if (user.firstName.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\r\n    //           user.lastName.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\r\n    //           user.username.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ||\r\n    //           user.userID.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {\r\n    //           results.push(user);\r\n    //       }\r\n    //     }\r\n    //     this.users = results;\r\n    //     if (results.length === 0 || !searchTerm) {\r\n    //       this.users = this.userService.getUsersFromLocalCache();\r\n    //     }\r\n    //   }\r\n    //   public get isAdmin(): boolean {\r\n    //     return this.getUserRole() === Role.ADMIN;\r\n    //   }\r\n    //   private getUserRole(): string {\r\n    //     return this.authenticationService.getUserFromLocalCache().role;\r\n    //   }\r\n    //   private sendNotification(notificationType: NotificationType, message: string): void {\r\n    //     if (message) {\r\n    //       this.notificationService.notify(notificationType, message);\r\n    //     } else {\r\n    //       this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\r\n    //     }\r\n    //   }\r\n    //   private clickButton(buttonId: string): void {\r\n    //     document.getElementById(buttonId).click();\r\n    //   }\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    }\r\n}\r\nUserComponent.ɵfac = function UserComponent_Factory(t) { return new (t || UserComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.NotificationService)); };\r\nUserComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: UserComponent, selectors: [[\"app-user\"]], decls: 21, vars: 5, consts: [[1, \"container\"], [1, \"row\", \"mb-2\", \"mt-2\", \"text-center\"], [1, \"col-md-4\"], [4, \"ngIf\"], [1, \"navbar\", \"navbar-expand-md\", \"breadcrumb\"], [\"id\", \"navbarCollapse\", 1, \"collapse\", \"navbar-collapse\"], [1, \"nav\", \"nav-pills\"], [\"data-toggle\", \"tab\", \"href\", \"#users\", 1, \"nav-item\", \"nav-link\", \"active\", \"ml-1\", 3, \"click\"], [1, \"fa\", \"fa-users\"], [\"data-toggle\", \"tab\", \"href\", \"#reset-password\", 1, \"nav-item\", \"nav-link\", \"ml-3\", 3, \"hidden\", \"click\"], [1, \"fa\", \"fa-cogs\"], [\"data-toggle\", \"tab\", \"href\", \"#profile\", 1, \"nav-item\", \"nav-link\", \"move-right\", \"mr-3\", 3, \"click\"], [1, \"fa\", \"fa-user\"]], template: function UserComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"div\", 1);\r\n        i0.ɵɵelement(2, \"div\", 2);\r\n        i0.ɵɵelementStart(3, \"div\", 2);\r\n        i0.ɵɵelementStart(4, \"h5\");\r\n        i0.ɵɵtext(5, \"User Management Portal\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(6, UserComponent_small_6_Template, 2, 1, \"small\", 3);\r\n        i0.ɵɵpipe(7, \"async\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(8, \"div\", 2);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(9, \"nav\", 4);\r\n        i0.ɵɵelementStart(10, \"div\", 5);\r\n        i0.ɵɵelementStart(11, \"div\", 6);\r\n        i0.ɵɵelementStart(12, \"a\", 7);\r\n        i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_12_listener() { return ctx.changeTitle(\"Users\"); });\r\n        i0.ɵɵelement(13, \"i\", 8);\r\n        i0.ɵɵtext(14, \" Users \");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(15, \"a\", 9);\r\n        i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_15_listener() { return ctx.changeTitle(\"Settings\"); });\r\n        i0.ɵɵelement(16, \"i\", 10);\r\n        i0.ɵɵtext(17, \" Settings \");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(18, \"a\", 11);\r\n        i0.ɵɵlistener(\"click\", function UserComponent_Template_a_click_18_listener() { return ctx.changeTitle(\"Profile\"); });\r\n        i0.ɵɵtext(19);\r\n        i0.ɵɵelement(20, \"i\", 12);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(6);\r\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(7, 3, ctx.titleAction$));\r\n        i0.ɵɵadvance(9);\r\n        i0.ɵɵproperty(\"hidden\", !ctx.isAdmin);\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵtextInterpolate1(\" Welcome, \", ctx.user == null ? null : ctx.user.firstName, \" \");\r\n    } }, directives: [i5.NgIf], pipes: [i5.AsyncPipe], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLmNvbXBvbmVudC5jc3MifQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}